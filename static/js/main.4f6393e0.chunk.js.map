{"version":3,"sources":["Components/PlayField/PlayField.module.css","Components/Main/Main.module.css","Components/Statistic/Statistic.module.css","Components/PlayField/drawStatusFunc.js","Components/Square/Square.jsx","Components/Board/Board.jsx","Components/Statistic/Statistic.jsx","Components/PlayField/PlayField.jsx","Components/PlayField/helperFunctions.js","Components/Modal/Modal.jsx","Components/Main/Main.jsx","App.js","index.js"],"names":["module","exports","Square","props","className","WinLine","winnerSquare","onClick","value","Board","squares","click","winnerBoard","map","square","i","includes","Statistic","style","statistic","namePlayer1","countPlayer1","namePlayer2","countPlayer2","PlayField","useState","player1","player2","count","setcount","Array","fill","board","setBoard","xIsNext","setXIsNext","winner","lines","length","a","b","c","calculateWinner","getSquaresWin","drawStatusOne","filter","s","getDrawStatusLastOne","drawStatusTwo","getDrawStatusLastTwo","drawStatusOneCenter","len","console","log","index","findIndex","el","getDrawStatusLastOneCentr","drawStatus","winArr","join","getWinLine","playerFirst","playerSecond","React","useEffect","span","draw","flex","fieldstatistic","boardCopy","buttonNewGame","Modal","active","setActive","state","handlerInputFirst","handlerInputSecond","e","stopPropagation","type","onChange","Main","showPlayField","setState","modalActive","setModalActive","text","event","target","App","showField","titleMessage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,IAAM,uBAAuB,eAAiB,kCAAkC,KAAO,wBAAwB,KAAO,wBAAwB,SAAW,4BAA4B,MAAQ,yBAAyB,cAAgB,iCAAiC,KAAO,wBAAwB,KAAO,0B,oBCA/TD,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,UAAY,+B,oPCDvB,I,OCGMC,EAAS,SAACC,GAGnB,OACI,qBAAKC,UAAWD,EAAME,QAAtB,SACI,qBACID,UAAYD,EAAMG,aAAe,uBAAyB,gBAC1DC,QAASJ,EAAMI,QAFnB,SAIKJ,EAAMK,WCTVC,G,MAAQ,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,YAAaP,EAAc,EAAdA,QACjD,OACI,qBAAKD,UAAS,WAAMC,GAApB,SACI,qBAAKD,UAAS,QAAd,SAEQM,EAAQG,KAAI,SAACC,EAAQC,GAAT,OACR,cAAC,EAAD,CAEIP,MAAOM,EACPR,aAAeM,EAAYI,SAASD,GAAM,SAAW,GACrDH,YAAaA,EACbL,QAAS,kBAAMI,EAAMI,KAJhBA,Y,iBCPpBE,EAAY,SAACd,GACtB,OACI,8BACI,sBAAKC,UAAWc,IAAMC,UAAtB,UACK,6CACA,uCAAUhB,EAAMiB,YAAhB,KAA+BjB,EAAMkB,gBACrC,uCAAUlB,EAAMmB,YAAhB,KAA+BnB,EAAMoB,sBCDzCC,EAAY,SAACrB,GAAW,IAAD,EACNsB,mBAAS,CAC/BC,QAAS,EACTC,QAAS,IAHmB,mBACzBC,EADyB,KAClBC,EADkB,OAKNJ,mBAASK,MAAM,GAAGC,KAAK,OALjB,mBAKzBC,EALyB,KAKlBC,EALkB,OAMFR,oBAAS,GANP,mBAMzBS,EANyB,KAMhBC,EANgB,KAQ1BC,EChBH,SAA0B1B,GAW7B,IAVA,IAAM2B,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFtB,EAAI,EAAGA,EAAIsB,EAAMC,OAAQvB,IAAK,CAAC,IAAD,cAEnBsB,EAAMtB,GAFa,GAE5BwB,EAF4B,KAE1BC,EAF0B,KAExBC,EAFwB,KAGnC,GAAI/B,EAAQ6B,IAAM7B,EAAQ6B,KAAO7B,EAAQ8B,IAAM9B,EAAQ6B,KAAO7B,EAAQ+B,GAClE,OAAO/B,EAAQ6B,GAGvB,OAAO,KDFQG,CAAgBV,GACzBpB,ECIH,SAAuBF,GAW1B,IAVA,IAAM2B,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFtB,EAAI,EAAGA,EAAIsB,EAAMC,OAAQvB,IAAK,CAAC,IAAD,cACjBsB,EAAMtB,GADW,GAC5BwB,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAI/B,EAAQ6B,IAAM7B,EAAQ6B,KAAO7B,EAAQ8B,IAAM9B,EAAQ6B,KAAO7B,EAAQ+B,GAClE,MAAO,CAACF,EAAGC,EAAGC,GAGtB,MAAO,GDrBaE,CAAcX,GAC5BY,EJoB0B,SAAClC,GACjC,IAAIkB,EAAQ,EACNS,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAKQ,IAFT3B,EAAQmC,QAAQ,SAAAC,GAAC,MAAU,MAANA,GAAmB,MAANA,KAEpCR,SACJV,GAAgB,GAEpB,IAAK,IAAIb,EAAI,EAAGA,EAAIsB,EAAMC,OAAQvB,IAAK,CAAC,IAAD,cACjBsB,EAAMtB,GADW,GAC5BwB,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEf,MAAf/B,EAAQ6B,IAA8B,MAAf7B,EAAQ8B,IAA6B,MAAf9B,EAAQ+B,IACtC,MAAf/B,EAAQ6B,IAA8B,MAAf7B,EAAQ8B,IAA6B,MAAf9B,EAAQ+B,KAClDb,GAAgB,GAG5B,OAAc,IAAVA,EI7CkBmB,CAAqBf,GACrCgB,EJnB0B,SAACtC,GACjC,IAAIkB,EAAQ,EACNS,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAIQ,IADT3B,EAAQmC,QAAQ,SAAAC,GAAC,MAAU,MAANA,GAAmB,MAANA,KACpCR,SACJV,GAAgB,GAKpB,IAAK,IAAIb,EAAI,EAAGA,EAAIsB,EAAMC,OAAQvB,IAAK,CAAC,IAAD,cACjBsB,EAAMtB,GADW,GAC5BwB,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEf,MAAf/B,EAAQ6B,IAA8B,MAAf7B,EAAQ8B,IAA6B,MAAf9B,EAAQ+B,IACtC,MAAf/B,EAAQ6B,IAA8B,MAAf7B,EAAQ8B,IAA6B,MAAf9B,EAAQ+B,KAClDb,GAAgB,GAG5B,OAAc,IAAVA,EIRkBqB,CAAqBjB,GACrCkB,EJqD+B,SAACxC,GACtC,IAAIkB,EAAQ,EAENS,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAILc,EAAMzC,EAAQmC,QAAQ,SAAAC,GAAC,MAAW,MAANA,GAAmB,MAANA,KAG/C,GAAmB,IAAfK,EAAIb,OAAc,CAClBc,QAAQC,IAAI,oBAAqBF,SAAYA,GAC7CC,QAAQC,IAAI,cAAezB,GAC3B,IAAI0B,EAAQ5C,EAAQ6C,WAAU,SAAAC,GAAE,MAAY,MAAPA,GAAqB,MAAPA,KACrC,IAAVF,IACA1B,GAAgB,GAEN,IAAV0B,IACA1B,GAAgB,GAEN,IAAV0B,IACA1B,GAAgB,GAEN,IAAV0B,IACA1B,GAAgB,GASxB,IAAK,IAAIb,EAAI,EAAGA,EAAIsB,EAAMC,OAAQvB,IAAK,CAAC,IAAD,cACjBsB,EAAMtB,GADW,GAC5BwB,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEf,MAAf/B,EAAQ6B,IAA8B,MAAf7B,EAAQ8B,IAA6B,MAAf9B,EAAQ+B,IACtC,MAAf/B,EAAQ6B,IAA8B,MAAf7B,EAAQ8B,IAA6B,MAAf9B,EAAQ+B,KAClDb,GAAgB,GAG5B,OAAc,IAAVA,IAMJwB,QAAQC,IAAI,WAAYzB,IACjB,GI5GqB6B,CAA0BzB,GAChD0B,EAAad,GAAiBI,GAAiBE,GAAuB,GACtE7C,ECmBH,SAAqBsD,GAUxB,OATkBA,EAAOC,QAUrB,IAAK,QACD,MAVK,OAWT,IAAK,QACD,MAXK,OAYT,IAAK,QACD,MAZK,OAaT,IAAK,QACD,MAbQ,UAcZ,IAAK,QACD,MAdQ,UAeZ,IAAK,QACD,MAfQ,UAgBZ,IAAK,QACD,MAhBW,aAiBf,IAAK,QACD,MAjBW,cD5BHC,CAAWjD,GAGrBc,EAAUvB,EAAM2D,YAAc3D,EAAM2D,YAAc,UAClDnC,EAAUxB,EAAM4D,aAAe5D,EAAM4D,aAAe,UAEzDX,QAAQC,IAAI,gBAAiBT,GAC7BQ,QAAQC,IAAI,gBAAiBL,GAC7BI,QAAQC,IAAI,sBAAuBH,GAIpCc,IAAMC,WAAW,WACb,GAAI7B,EACA,OAAQA,GACJ,IAAK,IACDP,EAAS,2BAAID,GAAL,IAAYF,QAASE,EAAMF,QAAU,KAC7C,MACJ,IAAK,IACDG,EAAS,2BAAID,GAAL,IAAYD,QAASC,EAAMD,QAAU,QAM1D,CAACS,IAEJ4B,IAAMC,WAAW,cASd,CAACjC,IAwBJ,OACI,gCACI,sBAAK5B,UAAWc,IAAMgD,KAAtB,UACI,+BACM9B,EAAS,MAAQA,EAAS,aAAeF,EAAU,IAAM,OAE/D,sBAAM9B,UAAWc,IAAMiD,KAAvB,UACQ/B,GAAUsB,EAAZ,WAAsC,QAKhD,sBAAKtD,UAAWc,IAAMkD,KAAtB,UAEI,qBAAKhE,UAAWc,IAAMmD,eAAtB,SACI,cAAC,EAAD,CACI3D,QAASsB,EACTrB,MAvCA,SAAC2C,GACjB,IAAMgB,EAAS,YAAOtC,GACtB,GAAII,GAAUkC,EAAUhB,IAAUI,EAC9B,OAAO,KAEXY,EAAUhB,GAASpB,EAAW,IAAO,IACrCD,EAASqC,GACTnC,GAAYD,IAiCItB,YAAaA,EACbP,QAASA,MAIjB,gCACI,cAAC,EAAD,CACIe,YAAaM,EACbJ,YAAaK,EACbN,aAAcO,EAAMF,QACpBH,aAAcK,EAAMD,UAtChC,wBACIvB,UAAWc,IAAMqD,cACjBhE,QAAS,kBAAM0B,EAASH,MAAM,GAAGC,KAAK,QAF1C,oCEtECyC,G,MAAQ,SAAC,GAAuE,IAAtEC,EAAqE,EAArEA,OAAQC,EAA6D,EAA7DA,UAAWC,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,kBAAmBC,EAAwB,EAAxBA,mBAGhE,OACI,qBACIzE,UAAYqE,EAAS,wBAA0B,iBAC/ClE,QAAS,kBAAMmE,GAAU,IAF7B,SAII,sBAAKtE,UAAU,iBAAiBG,QAAS,SAACuE,GAAD,OAAOA,EAAEC,mBAAlD,UACI,oBAAI3E,UAAU,cAAd,gCACA,uBACA4E,KAAK,OACL5E,UAAU,eACVI,MAAOmE,EAAMb,YACbmB,SAAUL,IAEX,uBACCI,KAAK,OACL5E,UAAU,eACVI,MAAOmE,EAAMZ,aACbkB,SAAUJ,IAEV,wBACIzE,UAAU,gBACVG,QAAS,kBAAMmE,GAAU,IAF7B,2BCnBHQ,EAAO,WAAO,IAAD,EAEIlB,IAAMvC,SAAS,CACrCqC,YAAY,UACZC,aAAa,UACboB,eAAe,IALG,mBAEfR,EAFe,KAERS,EAFQ,OAOgBpB,IAAMvC,UAAS,GAP/B,mBAOf4D,EAPe,KAOFC,EAPE,KAqBtB,OAEG,uBAAMlF,UAAWc,IAAMqE,KAAvB,UACK,cAAC,EAAD,CACIZ,MAAOA,EACPF,OAAQY,EACRX,UAAWY,EACXV,kBApBc,SAACY,GACvBJ,EAAS,2BACFT,GADC,IAEJb,YAAa0B,EAAMC,OAAOjF,UAkBtBqE,mBAfe,SAACW,GACxBJ,EAAS,2BACFT,GADC,IAEJZ,aAAcyB,EAAMC,OAAOjF,YAc3B,cAAC,EAAD,CACIsD,YAAaa,EAAMb,YACnBC,aAAcY,EAAMZ,mBCFrB2B,MAhCf,WAAgB,IAAD,EACa1B,IAAMvC,SAAS,CACvCkE,WAAW,EACXC,aAAc,kEAHH,mBACNjB,EADM,KACCS,EADD,KAcb,OACE,qBAAKhF,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,0FACA,qBAAKA,UAAU,SAAf,6BACC,+BAAKuE,EAAMiB,aAAX,qFACD,wBACExF,UAAU,UACVG,QAhBc,WACpB6E,EAAS,2BACJT,GADG,IAENgB,WAAYhB,EAAMgB,UAClBC,aAAgBjB,EAAMgB,UAAiC,gEAAnB,sFAUlC,SAIGhB,EAAMiB,eAERjB,EAAMgB,WAAa,cAAC,EAAD,UCxB5BE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4f6393e0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"big\":\"PlayField_big__2dgmj\",\"fieldstatistic\":\"PlayField_fieldstatistic__3nlPF\",\"flex\":\"PlayField_flex__6aeXS\",\"grid\":\"PlayField_grid__1R9KM\",\"fieldBox\":\"PlayField_fieldBox__3LnxP\",\"space\":\"PlayField_space__3dh-e\",\"buttonNewGame\":\"PlayField_buttonNewGame__3G4oq\",\"span\":\"PlayField_span__1RR-8\",\"draw\":\"PlayField_draw__1nael\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Main_text__24d68\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistic\":\"Statistic_statistic__19Qhu\"};","export const getDrawStatusLastTwo = (squares) => {\n    let count = 0;\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    \n    let len = squares.filter( s => s !== 'X' && s !== '0');\n    if (len.length === 2) {\n        count = count + 1;\n    }\n    // if (len.length === 1) {\n    //     count = count + 2;\n    // }\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if ((squares[a] === 'X' ||  squares[b] === 'X' || squares[c] === 'X') &&\n            (squares[a] === '0' ||  squares[b] === '0' || squares[c] === '0')) {\n                count = count + 1; \n            }   \n    }\n    if (count === 8 ) {\n        return true;\n    }\n    // if (count === 10) {\n    //     return true;\n    // }\n    // console.log('count222222',count);\n    return false;\n    \n};\n\nexport const getDrawStatusLastOne = (squares) => {\n    let count = 0;\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    \n    let len = squares.filter( s => s !== 'X' && s !== '0');\n\n    if (len.length === 1) {\n        count = count + 1;\n    }\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if ((squares[a] === 'X' ||  squares[b] === 'X' || squares[c] === 'X') &&\n            (squares[a] === '0' ||  squares[b] === '0' || squares[c] === '0')) {\n                count = count + 1; \n            }   \n    }\n    if (count === 8 ) {\n        return true;\n    }\n    // if (count === 10) {\n    //     return true;\n    // }\n    // console.log('count1111111',count);\n    return false;\n};\n\nexport const getDrawStatusLastOneCentr = (squares) => {\n    let count = 0;\n    // let len = 0;\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    \n    \n    const len = squares.filter( s => (s !== 'X' && s !== '0') );\n    \n\n    if (len.length === 1) {\n        console.log('lastlen>>>>>>>>>>', len, typeof(len));\n        console.log('count>>>>>>', count)\n        let index = squares.findIndex(el => (el !== 'X' && el !== '0'))\n        if (index === 1 ) { \n            count = count + 1;\n        }\n        if (index === 3 ) { \n            count = count + 1;\n        }\n        if (index === 5 ) { \n            count = count + 1;\n        }\n        if (index === 7 ) { \n            count = count + 1;\n        }\n        // if (index === (1 || 3 || 5 || 7)) {\n        //     count = count + 1;\n        //     console.log('index>>>>>>>>>>', index, typeof(index));\n        //     console.log('count>>>>>>', count)\n        // }\n    }\n    \n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if ((squares[a] === 'X' ||  squares[b] === 'X' || squares[c] === 'X') &&\n            (squares[a] === '0' ||  squares[b] === '0' || squares[c] === '0')) {\n                count = count + 1; \n            }   \n    }\n    if (count === 8 ) {\n        return true;\n    }\n    // if (count === 10) {\n    //     return true;\n    // }\n    console.log('OneCentr', count);\n    return false;\n\n};\n\n// if ((squares[0] === 'X' ||  squares[1] === 'X' || squares[2] === 'X') &&\n// (squares[0] === '0' ||  squares[1] === '0' || squares[2] === '0') &&\n// (squares[3] === 'X' ||  squares[4] === 'X' || squares[5] === 'X') &&\n// (squares[3] === '0' ||  squares[4] === '0' || squares[5] === '0') &&\n// (squares[6] === 'X' ||  squares[7] === 'X' || squares[8] === 'X') &&\n// (squares[6] === '0' ||  squares[7] === '0' || squares[8] === '0') &&\n// (squares[0] === 'X' ||  squares[3] === 'X' || squares[6] === 'X') &&\n// (squares[0] === '0' ||  squares[3] === '0' || squares[6] === '0') &&\n// (squares[1] === 'X' ||  squares[4] === 'X' || squares[7] === 'X') &&\n// (squares[1] === '0' ||  squares[4] === '0' || squares[7] === '0') &&\n// (squares[2] === 'X' ||  squares[5] === 'X' || squares[8] === 'X') &&\n// (squares[2] === '0' ||  squares[5] === '0' || squares[8] === '0') &&\n// (squares[0] === 'X' ||  squares[4] === 'X' || squares[8] === 'X') &&\n// (squares[0] === '0' ||  squares[4] === '0' || squares[8] === '0') &&\n// (squares[2] === 'X' ||  squares[4] === 'X' || squares[6] === 'X') &&\n// (squares[2] === '0' ||  squares[4] === '0' || squares[6] === '0') ||\n// (len.length === 2)) {\n//     return true;\n// }\n\n// return false;\n\n// возвращает список индексов пустых клеток доски\n// export function emptyIndices(board) {\n//     let len = board.filter( s => s != 'X' && s != '0');\n//     if (len.length === 2) \n//     return  \n//   }\n\n","import  './Squares.css';\n\n\nexport const Square = (props) => {\n    // console.log(props.WinLine);\n    // className={ active ? \"modal__wrapper active\" : \"modal__wrapper\" }\n    return (\n        <div className={props.WinLine}>\n            <div\n                className={ props.winnerSquare ? \"button__field winner\" : \"button__field\" } \n                onClick={props.onClick}\n            >\n                {props.value}\n            </div>\n        </div>\n    );\n};","import {Square} from '../Square/Square';\nimport './Board.css';\n\nexport const Board = ({ squares, click, winnerBoard, WinLine }) => {\n    return (\n        <div className={` ${WinLine}`}>\n            <div className={`grid `}>\n                {\n                    squares.map((square, i) => (\n                        <Square\n                            key={i} \n                            value={square}\n                            winnerSquare={(winnerBoard.includes(i)) ? \"winner\" : \"\"}\n                            winnerBoard={winnerBoard}\n                            onClick={() => click(i)}\n                        />\n                    ))\n                }\n            </div>\n        </div>\n    );\n};","import style from './Statistic.module.css';\n\n\nexport const Statistic = (props) => {\n    return (\n        <div>\n            <div className={style.statistic}>\n                 <span>Statistic</span>\n                 <div>win {props.namePlayer1}: {props.countPlayer1}</div>\n                 <div>win {props.namePlayer2}: {props.countPlayer2}</div>\n             </div>\n        </div>\n    );\n};","import React, { useState } from 'react';\nimport style from './PlayField.module.css';\nimport { calculateWinner, getSquaresWin, getWinLine } from './helperFunctions';\nimport { getDrawStatusLastTwo, getDrawStatusLastOne, getDrawStatusLastOneCentr } from './drawStatusFunc';\nimport { Board } from '../Board/Board';\nimport { Statistic } from '../Statistic/Statistic';\n\n\nexport const PlayField = (props) => {\n    const [count, setcount] = useState({\n        player1: 0,\n        player2: 0,\n    });\n    const [board, setBoard] = useState(Array(9).fill(null));\n    const [xIsNext, setXIsNext] = useState(true);\n    \n    const winner = calculateWinner(board);\n    const winnerBoard = getSquaresWin(board);\n    const drawStatusOne = getDrawStatusLastOne(board);\n    const drawStatusTwo = getDrawStatusLastTwo(board);\n    const drawStatusOneCenter = getDrawStatusLastOneCentr(board);\n    const drawStatus = drawStatusOne || drawStatusTwo || drawStatusOneCenter || ''; \n    const WinLine = getWinLine(winnerBoard);\n    \n\n    const player1 = props.playerFirst ? props.playerFirst : 'PLAYER1';\n    const player2 = props.playerSecond ? props.playerSecond : 'PLAYER2';\n\n     console.log('drawStatusOne', drawStatusOne);\n     console.log('drawStatusTwo', drawStatusTwo);\n     console.log('drawStatusOneCenter', drawStatusOneCenter);\n\n \n\n    React.useEffect( () => {\n        if (winner) {\n            switch (winner) {\n                case 'X':\n                    setcount({...count, player1: count.player1 + 1})\n                    break;\n                case '0':\n                    setcount({...count, player2: count.player2 + 1})\n                    break;\n                default:\n                    break;\n            }\n        }\n    }, [winner] );\n    \n    React.useEffect( () => {\n        \n        // console.log('board',board);\n        // console.log('nexStep',nexStep);\n        // console.log('drawStatus',drawStatus);\n        // console.log('drawStatusOne',drawStatusOne);\n        // console.log('drawStatusTwo',drawStatusTwo);\n        // console.log('drawStatusOneCenter',drawStatusOneCenter);\n\n    }, [board]);\n    \n    const handleClick = (index) => {\n        const boardCopy = [...board];\n        if (winner || boardCopy[index] || drawStatus) {\n            return null;\n        }\n        boardCopy[index] = xIsNext ?  'X' :  '0';\n        setBoard(boardCopy);\n        setXIsNext(!xIsNext);\n        \n    };\n    const startNewGame = () => {\n        return (\n            <button\n                className={style.buttonNewGame}\n                onClick={() => setBoard(Array(9).fill(null))}\n            >\n                startNewGame\n            </button>\n        );\n    };\n\n\n    return (\n        <div>\n            <div className={style.span}>\n                <span>\n                    { winner ? 'Win' + winner : `Next move` + (xIsNext ? 'X' : '0')}\n                </span>\n                <span className={style.draw}>\n                    { (!winner && drawStatus) ? `  DRAW  `: \"\" }\n                    {/* { (!winner && !board.includes(null)) ? `  DRAW  `: \"\" } */}\n                </span>\n\n            </div>\n            <div className={style.flex}>\n                \n                <div className={style.fieldstatistic}>\n                    <Board \n                        squares={board} \n                        click={handleClick} \n                        winnerBoard={winnerBoard}\n                        WinLine={WinLine}\n                    />\n                </div>\n\n                <div>\n                    <Statistic \n                        namePlayer1={player1}\n                        namePlayer2={player2}\n                        countPlayer1={count.player1}\n                        countPlayer2={count.player2}\n                    />\n                    { startNewGame() }\n                </div>\n            </div>\n        </div>\n    );\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    // const [state, setState] = React.useState({\n    //     squares: Array(9).fill(null),\n    //     count: 0,\n    // });\n    // const [xIsNext, setXIsNext] = React.useState(true);\n    // const winner = calculateWinner(state.squares);\n    // const player1 = props.playerFirst ? props.playerFirst : 'PLAYER1';\n    // const player2 = props.playerSecond ? props.playerSecond : 'PLAYER2';\n\n\n    \n    // const handClick = (event) => {\n    //     const winner = calculateWinner(state.squares);\n    //     console.log(winner);\n    //     let data = event.target.getAttribute('data');\n    //     const boardCopy = [...state.squares];\n    //     if (winner || boardCopy[data]) {\n    //         return null;\n    //     }\n    //     boardCopy[data] = xIsNext ?  'X' :  '0';\n    //     setState(boardCopy);\n    //     setXIsNext(!xIsNext);\n    // };\n\n    // // const [count, setCount] = React.useState(0);\n    // // let gridElement = Array(9).fill(null);\n    // // gridElement[8] = null;\n    // // gridElement.fill(null);\n    \n    \n\n\n\n    // const handlerClick = (event) => {\n    //     let data = event.target.getAttribute('data');\n    //     // const winner = calculateWinner(state.squares);\n    //     let currentPlayField = state.squares;\n    //     if (winner || currentPlayField[data] === null) {\n    //         currentPlayField[data] = (state.count % 2 === 0) \n    //         ?  'X'\n    //         :  '0';\n            \n    //         setState({\n    //             ...state,\n    //             squares: currentPlayField,\n    //             count: state.count + 1\n    //         });\n    //     } else {\n\n    //     };\n    //     console.log(state.squares);\n    //     console.log(winner);\n    // };\n    \n    \n    // return (\n    //     <div className={style.big}>\n    //         <div className={style.space}></div>\n    //         <div className={style.fieldstatistic}>\n    //         <div className={style.grid}>\n    //             {state.squares.map((element, index) => (\n    //                 <div \n    //                     key={index}\n    //                     className={style.fieldBox}\n    //                     onClick={handlerClick}\n    //                     // onClick={handClick}\n    //                     data={index}\n    //                     id={index}\n    //                 >\n    //                 {state.squares[index]}\n    //                 </div>))}\n    //         </div>\n    //         <div className={style.statistic}>\n    //             <span>Statistic</span>\n    //             <div>move {}: </div>\n    //             <div>win {player1}: </div>\n    //             <div>win {player2}: </div>\n    //             <div>draw: </div>\n    //         </div>\n    //         </div>\n    //         <div className={style.space}></div>\n            \n    //     </div>\n        \n    // );\n}\n\n\n\n// function ActionLink() {\n//     function handleClick(e) {\n//       e.preventDefault();\n//       console.log('The link was clicked.');\n//     }\n  \n//     return (\n//       <a href=\"#\" onClick={handleClick}>\n//         Click me\n//       </a>\n//     );\n//   }","export function calculateWinner (squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n\n        const [a,b,c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n};\n\nexport function getSquaresWin(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return [a, b, c];\n        }\n    }\n    return [];\n}\n\nexport function getWinLine (winArr) {\n    const stringArr = winArr.join();\n    const row1 = \"row1\";\n    const row2 = \"row2\";\n    const row3 = \"row3\";\n    const column1 = 'column1';\n    const column2 = 'column2';\n    const column3 = 'column3';\n    const diagonal09 = 'diagonal09';\n    const diagonal37 = 'diagonal37';\n    switch (stringArr) {\n        case \"0,1,2\":\n            return  row1;\n        case \"3,4,5\":\n            return  row2;\n        case \"6,7,8\":\n            return  row3;\n        case \"0,3,6\":\n            return  column1;\n        case \"1,4,7\":\n            return  column2;\n        case \"2,5,8\":\n            return  column3;\n        case \"0,4,8\":\n            return  diagonal09;\n        case \"2,4,6\":\n            return  diagonal37;\n        default:\n            break;\n    }\n    // return [];\n}\n\n\n// export const getDrawStatus = (squares) => {\n//     let count = 0;\n//     const lines = [\n//         [0, 1, 2],\n//         [3, 4, 5],\n//         [6, 7, 8],\n//         [0, 3, 6],\n//         [1, 4, 7],\n//         [2, 5, 8],\n//         [0, 4, 8],\n//         [2, 4, 6],\n//     ];\n    \n//     let len = squares.filter( s => s !== 'X' && s !== '0');\n//     if (len.length === 2) {\n//         count = count + 1;\n//     }\n//     for (let i = 0; i < lines.length; i++) {\n//         const [a, b, c] = lines[i];\n//         if ((squares[a] === 'X' ||  squares[b] === 'X' || squares[c] === 'X') &&\n//             (squares[a] === '0' ||  squares[b] === '0' || squares[c] === '0')) {\n//                 count = count + 1; \n//             }   \n//     }\n//     if (count === 8) {\n//         return true;\n//     }\n//     console.log('count',count);\n//     return false;\n    \n// }\n\n\n\n// if ((squares[0] === 'X' ||  squares[1] === 'X' || squares[2] === 'X') &&\n// (squares[0] === '0' ||  squares[1] === '0' || squares[2] === '0') &&\n// (squares[3] === 'X' ||  squares[4] === 'X' || squares[5] === 'X') &&\n// (squares[3] === '0' ||  squares[4] === '0' || squares[5] === '0') &&\n// (squares[6] === 'X' ||  squares[7] === 'X' || squares[8] === 'X') &&\n// (squares[6] === '0' ||  squares[7] === '0' || squares[8] === '0') &&\n// (squares[0] === 'X' ||  squares[3] === 'X' || squares[6] === 'X') &&\n// (squares[0] === '0' ||  squares[3] === '0' || squares[6] === '0') &&\n// (squares[1] === 'X' ||  squares[4] === 'X' || squares[7] === 'X') &&\n// (squares[1] === '0' ||  squares[4] === '0' || squares[7] === '0') &&\n// (squares[2] === 'X' ||  squares[5] === 'X' || squares[8] === 'X') &&\n// (squares[2] === '0' ||  squares[5] === '0' || squares[8] === '0') &&\n// (squares[0] === 'X' ||  squares[4] === 'X' || squares[8] === 'X') &&\n// (squares[0] === '0' ||  squares[4] === '0' || squares[8] === '0') &&\n// (squares[2] === 'X' ||  squares[4] === 'X' || squares[6] === 'X') &&\n// (squares[2] === '0' ||  squares[4] === '0' || squares[6] === '0') ||\n// (len.length === 2)) {\n//     return true;\n// }\n\n// return false;\n\n// возвращает список индексов пустых клеток доски\n// export function emptyIndices(board) {\n//     let len = board.filter( s => s != 'X' && s != '0');\n//     if (len.length === 2) \n//     return  \n//   }\n\n","import './modal.css';\n\nexport const Modal = ({active, setActive, state, handlerInputFirst, handlerInputSecond}) => {\n\n    \n    return (\n        <div \n            className={ active ? \"modal__wrapper active\" : \"modal__wrapper\" } \n            onClick={() => setActive(false)} \n        >\n            <div className=\"modal__content\" onClick={(e) => e.stopPropagation()}>\n                <h3 className=\"modal__text\">Enter Players Name</h3>\n                <input \n                type=\"text\"\n                className=\"input__modal\"\n                value={state.playerFirst}\n                onChange={handlerInputFirst}\n                />\n               <input \n                type=\"text\"\n                className=\"input__modal\"\n                value={state.playerSecond}\n                onChange={handlerInputSecond}\n                />\n                <button \n                    className=\"button__modal\"\n                    onClick={() => setActive(false)}\n                >\n                   BUTTON\n                </button>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\nimport style from './Main.module.css';\nimport { PlayField } from '../PlayField/PlayField';\nimport { Modal } from '../Modal/Modal';\n\nexport const Main = () => {\n    \n    const [state, setState] = React.useState({\n        playerFirst:'Player1',\n        playerSecond:'Player2',\n        showPlayField: false,\n    });\n    const [modalActive, setModalActive] = React.useState(true);\n    const handlerInputFirst = (event) => {\n        setState({\n            ...state,\n            playerFirst: event.target.value,\n        });\n    };\n    const handlerInputSecond = (event) => {\n        setState({\n            ...state,\n            playerSecond: event.target.value,\n        });\n    };\n    \n    return (\n       \n       <main className={style.text}>\n            <Modal \n                state={state} \n                active={modalActive} \n                setActive={setModalActive}\n                handlerInputFirst={handlerInputFirst}\n                handlerInputSecond={handlerInputSecond} \n            />\n            <PlayField \n                playerFirst={state.playerFirst}\n                playerSecond={state.playerSecond}\n            />\n        </main>\n    );\n}; ","import React from 'react';\nimport './App.css';\nimport { Main } from './Components/Main/Main';\n\nfunction App() {\n  const [state, setState] = React.useState({\n    showField: false,\n    titleMessage: 'Начать игру',\n  });\n\n  const handlerToggle = () => {\n    setState({\n      ...state,\n      showField: !state.showField,\n      titleMessage: (!state.showField) ?  'Закончить игру' : 'Начать игру',\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h3>Привет это </h3>\n        <div className=\"symbol\"> &#10006; &#9412; </div>\n        {<h3>{state.titleMessage}  &#9759; &#9759; &#9759; нажми меня </h3>}\n        <button \n          className=\"buttton\"\n          onClick={handlerToggle}\n        >\n          {state.titleMessage}\n        </button>\n        {state.showField && <Main />}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}